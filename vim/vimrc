" @hunjae's vimrc file
" https://github.com/wookayin/dotfiles


"""""""""""""""""""""""""""
" 0. Load Plugin
"""""""""""""""""""""""""""

" All the vim plugins, powered by 'vim-plug', are
" listed up in the separate file 'plugins.vim'.
" It is for making this vimrc could also work out-of-box
" even if not managed by dotfiles.
if filereadable(expand("\~/.vim/plugins.vim"))
	source \~/.vim/plugins.vim
endif

"""""""""""""""""""""""""""
" 1. General Settings
"""""""""""""""""""""""""""
syntax on
set nocompatible

" use path '~/.vim' even on non-unix machine
set runtimepath+=~/.vim

" load plugins with pathogen
try
	runtime bundle/vim-pathogen/autoload/pathogen.vim
	call pathogen#infect()
catch
endtry

" basic displays
set number					" show line numbers
set ruler

" input settings
set bs=indent,eol,start		" allow backspaces over everything
set autoindent
set smartindent
set pastetoggle=<F8>

set nowrap
set textwidth=0				" disable automatic line breaking
set cursorline

" tab settings
set tabstop=4
set shiftwidth=4
set softtabstop=4

" tab navigation
set showtabline=2			" always show tab pannel

set scrolloff=3

" search
set ignorecase				" case-insensitive by default
set smartcase				" case-sensitive if keyword contains both uppercase and lowercase
set incsearch
set hlsearch

" listchars for whitespaces
set list
set listchars=tab:Â»\ ,trail:Â·,extends:>,precedes:<

" wildmenu settings
set wildmenu
set wildmode=list:longest,full
set wildignore=*.swp,*.swo,*.class

" status line
set laststatus=2			" show anytime


" native customized statusline, if airline is not available
" (this setting will be replaced afterwards by airline)
set statusline=%1*%{winnr()}\ %*%<\ %f\ %h%m%r%=%l,%c%V\ (%P)

" mouse behaviour
set mouse=nvc
set ttymouse=xterm2

" encoding and line ending settings
set encoding=utf-8
set fileencodings=utf-8,cp949,latin1
set fileformats=unix,dos

" split and autocomplete settings
set splitbelow              " preview window at bottom

" no fucking swap and backup files
set noswapfile
set nobackup

" miscellanious
set showmode
set showcmd

set visualbell
set history=1000
set undolevels=1000
set lazyredraw				" no redrawing during macro execution

set mps+=<:>

" when launching files via quickfix, CtrlP, or something else,
" first switch to existing tab (if any) that contains the target buffer,
" or open a new buffer by splitting window in the current tab otherwise.
set switchbuf+=usetab,split

" diff: ignore whitespaces
set diffopt+=iwhite

" jump to the last position when reopening a file
if has("autocmd")
  let s:last_position_disable_filetypes = ['gitcommit']
  au BufReadPost * if index(s:last_position_disable_filetypes, &ft) < 0 && line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"zz" | endif
endif


""""""""""""""""""""""""""""""""
" 2. Key and Functional Mappings
""""""""""""""""""""""""""""""""

" the leader key
let mapleader=","			" comma is the <Leader> key.

" navigation key mapping
map k gk
map j gj
sunmap k
sunmap j

nmap <up> gk
nmap <down> gj
imap <up> <c-o>gk
imap <down> <c-o>gj

" Ignore errornous input in Mac OS X
imap <D-space> <Nop>

" window navigation
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

" Tab navigations
nnoremap <C-t>     :tabnew<CR>
nnoremap <C-S-tab> :tabprevious<CR>
nnoremap <C-tab>   :tabnext<CR>

" Alternative tab navigations (@seealso gt, gT)
" (terminals might capture <Ctrl-t> or something else)
nnoremap <leader>tn  :tabnext<CR>
nnoremap <leader>tp  :tabprev<CR>

" Handy tab navigations: <Alt-num>
nnoremap 1 1gt
nnoremap 2 2gt
nnoremap 3 3gt
nnoremap 4 4gt
nnoremap 5 5gt
nnoremap 6 6gt
nnoremap 7 7gt
nnoremap 8 8gt
nnoremap 9 9gt

" do not exit from visual mode when shifting
" (gv : select the preivous area)
vnoremap < <gv
vnoremap > >gv

" [F5] Make
if isdirectory(expand("~/.vim/plugged/vim-dispatch"))
	" use vim-dispatch if exists
	map <F5> <ESC>:w<CR>:Make<CR>
	imap <F5> <ESC>:w<CR>:Make<CR>
else
	" otherwise, fallback to default make
	map <F5> <ESC>:w<CR>:make!<CR>
	imap <F5> <ESC>:w<CR>:make!<CR>
endif

" [F4] Next Error [Shift+F4] Previous Error
map <F4> <ESC>:cn<CR>
map [26~ <ESC>:cp<CR>
map [1;2S <ESC>:cp<CR>

" [F2] save
imap <F2> <ESC>:w<CR>
map <F2> <ESC><ESC>:w<CR>

" Sudo Save (:Wsudo command)
command! Wsudo w !sudo tee % > /dev/null

" handy command-line mode
nnoremap ; :


" Useful leader key combinations {{{

" <leader><space> : turn off search highlight
nmap <leader><space> :noh<CR>

" Plugin ag.vim
" <leader>ag : Ag (search file contents)
nnoremap <leader>ag :Ag! -i ""<Left>

" <leader>cd : switch to the directory of the current buffer
nmap <leader>cd :cd %:p:h<CR>

" <leader>r : screen sucks, redraw everything
nnoremap <leader>r :redraw!<CR>

" <leader>src : source ~/.vimrc
nnoremap <leader>src :source ~/.vimrc<CR>

" <leader>y, <leader>p : yank to or paste from the system clipboard
noremap <leader>y "*y
noremap <leader>p "*p

" <leader>w : save
nnoremap <leader>w :w!<CR>

" <leader>S : Strip trailing whitespaces
nnoremap <leader>S :call StripTrailingWhitespaces()<CR>

" <leader>df : diffthis
nnoremap <leader>df :diffthis<CR>

" Surround a word with quotes, single quotes, parens, brackets, braces, etc.
"   requires and powered by the plugin surround.vim :-)
" (Note) for visual blocks, use S command from surround.vim
map  <leader>s" ysiw"
map  <leader>s' ysiw'
map  <leader>s` ysiw`
map  <leader>s* ysiw*l
map  <leader>s_ ysiw_l
map  <leader>s~ ysiw~l
map  <leader>s$ ysiw$
map  <leader>s( ysiw(
map  <leader>s) ysiw)
map  <leader>s[ ysiw[
map  <leader>s] ysiw]
map  <leader>s{ ysiw{
map  <leader>s} ysiw}


"""""""""""""""""""""""""""""""""
" 3. Colors, Highlight and Syntax
"""""""""""""""""""""""""""""""""

" color settings
" @see http://www.calmar.ws/vim/256-xterm-24bit-rgb-color-chart.html
set t_Co=256				" use 256 color
set bg=dark

if &term =~ '256color'
	" Disable Background Color Erase (BCE) so that color schemes
	" work properly when Vim is used inside tmux and GNU screen.
	set t_ut=
endif

" apply base theme
silent! colorscheme xoria256

" override more customized colors
highlight StatusLine    ctermfg=LightGreen

highlight LineNr        ctermfg=248 ctermbg=233 guifg=#a8a8a8 guibg=#121212
highlight SignColumn    ctermfg=248 ctermbg=233 guifg=#a8a8a8 guibg=#121212

highlight Normal        ctermfg=255 guifg=white
highlight Comment       ctermfg=035 guifg=#38B04A
highlight Constant      ctermfg=204 guifg=#ff5f87
highlight PreProc       ctermfg=219 guifg=#ffafff
highlight SpecialKey    ctermfg=242 guifg=#666666

" no underline, current cursor line
highlight CursorLine	cterm=none

" show cursorline for active window only
augroup NrHighlight
  autocmd!
  autocmd BufEnter * setlocal cursorline
  autocmd BufLeave * setlocal nocursorline
augroup END

" IDE settings
filetype plugin on
filetype indent on

" Use spaces instead of tab in python codes
au FileType python set expandtab
au FileType tex set expandtab

" filetype detections
au BufRead,BufNewFile /etc/nginx/* if &ft == '' | setfiletype nginx | endif

" remove trailing whitespaces on save
fun! StripTrailingWhitespaces()
	let l = line(".")
	let c = col(".")
	%s/\s\+$//e
	call cursor(l, c)
endfun

autocmd FileType c,cpp,java,javascript,html,ruby,python,tex autocmd BufWritePre <buffer> :call StripTrailingWhitespaces()

" highlight trailing whitespaces
highlight ExtraWhitespace ctermbg=red guibg=red

match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()


" better popup menu colors (instead of dark black)
highlight Pmenu ctermfg=black ctermbg=yellow
highlight PmenuSel ctermfg=red ctermbg=white gui=bold

"""""""""""""""""""""""""""
" 4. GUI Options
"""""""""""""""""""""""""""

" gui settings
if has("gui_running")

	if has("unix")
		let s:uname = substitute(system("uname -s"), '\n', '', '')
	endif

	if has("gui_win32")
		language mes en			" use english messages (korean characters broken)
		set langmenu=none		" use english context menus (korean characters broken)
		set guioptions-=T		" exclude toolbar
		set guioptions-=m		" exclude menubar

		" font setting for windows
		set guifont=Consolas:h11:cANSI
		set guifontwide=GulimChe:h12:cDEFAULT

	elseif has("gui_gtk2")
		" font setting for Ubuntu linux (GTK)
		set guifont=Ubuntu\ Mono\ derivative\ Powerline\ 12

	elseif has("unix") && s:uname == "Darwin"
		" font setting for Mac OS X (Darwin)
		set guifont=Monaco\ for\ Powerline:h12
		set guifontwide=Apple\ SD\ Gothic\ Neo\ UltraLight:h12
	endif

endif


"""""""""""""""""""""""""""
" 5. Plugin Settings
"""""""""""""""""""""""""""

" vim-startify {{{

let g:startify_bookmarks = [
	\ '~/.vim/vimrc',
	\ '~/.vim/plugins.vim',
	\ ]

let g:startify_skiplist = [
    \ 'COMMIT_EDITMSG',
    \ $VIMRUNTIME .'/doc',
    \ 'plugged/.*/doc',
    \ 'bundle/.*/doc',
	\ ]
" }}}

" Airline {{{
	" use airline, with powerline-ish theme
	let g:airline_theme='powerlineish'
	let g:airline_powerline_fonts=1

	" enable tabline feature
	let g:airline#extensions#tabline#enabled = 1

	" suppress mixed-indent warning for javadoc-like comments (/** */)
	let g:airline#extensions#whitespace#mixed_indent_algo = 1
" }}}

" CtrlP.vim {{{
let g:ctrlp_custom_ignore = '\v[\/](node_modules|target|dist|bin)|(\.(ico|git|svn))$'

" Default to filename searches (switch: C-D)
let g:ctrlp_by_filename = 1

" }}}

" CtrlP-Z {{{
let g:ctrlp_z_nerdtree = 1
let g:ctrlp_extensions = ['Z', 'F']

nnoremap <leader>z :CtrlPZ<CR>
nnoremap <leader>f :CtrlPF<CR>

command! Z CtrlPZ
command! F CtrlPF

" }}}

" NerdTree {{{

" change CWD when the NERDtree is first loaded to the directory initialized in
" (e.g. change CWD to the directory hitted by CtrlPZ)
let g:NERDTreeChDirMode = 1

" <Leader>N toggles NERDTree (across tab)
map <Leader>N <plug>NERDTreeTabsToggle<CR>

" Startup Options (do NOT show automatically)
let g:nerdtree_tabs_open_on_console_startup = 0
let g:nerdtree_tabs_open_on_gui_startup = 0

" }}}


" Easymotion {{{

" Trigger <,F> to launch easymotion global jump
nmap <leader>F <Plug>(easymotion-s)

" backward, forward search is mapped to easymotion.
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

" Jump to first match, by Enter or Space
let g:EasyMotion_enter_jump_first = 1
let g:EasyMotion_space_jump_first = 1

" }}}

" UltiSnips {{
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"
" }}}

" vim-pandoc {{{

" disable automatic folding
let g:pandoc#modules#disabled = ["folding"]

" disable conceals
let g:pandoc#syntax#conceal#use = 0

" disable spell check
let g:pandoc#spell#enabled = 0

" }}}


" python-mode {{{

" disable code folding by default
let g:pymode_folding = 0

" disable rope (terribly slow), in favor of jedi-vim
let g:pymode_rope = 0

" prefer jedi's <leader>r (rename), instead of run
" however, jedi resets all the highlight :( - why?
let g:pymode_run = 0

" }}}


" fugitive {{{

" key mappings
nnoremap <leader>gd :Gvdiff<CR>
nnoremap <leader>gD :Gvdiff HEAD<CR>
nnoremap <leader>gs :Gstatus<CR>:20wincmd +<CR>
nnoremap <leader>gw :Gwrite<CR>
nnoremap <leader>gb :Gblame -w<CR>:vertical resize 10<CR>
nnoremap <leader>gci :Gcommit --verbose<CR>

" }}}

" gundo key mappings and options
let g:gundo_right = 1   " show at right
nnoremap <leader>G :GundoToggle<CR>

" tagbar key mappings
nnoremap <leader>T :TagbarToggle<CR>



"""""""""""""""""""""""""""
" Extra Settings
"""""""""""""""""""""""""""

" Use local vimrc if available
if filereadable(expand("\~/.vimrc.local"))
	source \~/.vimrc.local
endif


" For pdb
map <Leader>p :call InsertLine()<CR>

function! InsertLine()
  let trace = expand("import pdb; pdb.set_trace()")
  execute "normal o".trace
endfunction


" Macro
ab hunjae@ hunjae@ab180.co
ab pdb@ import pdb; pdb.set_trace()
ab div@ <div className=""></div>
ia time@ <C-R>=strftime("%Y.%m.%d %H:%M:%S")<CR>
ca ã w
ca ãã wq
